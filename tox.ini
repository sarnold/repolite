[tox]
envlist = py3{7,8,9,10,11}-{linux,macos,windows}
skip_missing_interpreters = true
isolated_build = true
skipsdist = true

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311

[gh-actions:env]
PLATFORM =
    ubuntu-20.04: linux
    macos-latest: macos
    windows-latest: windows

[base]
deps =
    pip>=21.1
    setuptools_scm[toml]

[build]
deps =
    pip>=21.1
    build
    twine

[testenv]
skip_install = true

setenv =
    PYTHONPATH = {toxinidir}/src

passenv =
    SETUPTOOLS_SCM_DEBUG
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE
    REPO_CFG

allowlist_externals =
    bash

deps =
    {[base]deps}
    # logging_tree
    .[test,cov]

commands =
    #python -c "import repolite; print(repolite.__description__)"
    #repolite --version
    python -m pytest {posargs:"-v"} tests/ --capture=no --cov=repolite --cov-branch --cov-report term-missing

[testenv:prep]
skip_install = true

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE
    REPO_CFG

setenv =
    git_dummy_git_dir = {env:git_dummy_git_dir:tests/testdata}

deps =
    {[base]deps}
    # logging_tree
    git-dummy @ https://github.com/sarnold/git-dummy/archive/refs/heads/proj-workflow.tar.gz

commands =
    git-dummy --name=daffy --branches=5 --diverge-at=2
    git-dummy --name=porky --branches=4 --diverge-at=3

[testenv:dev]
skip_install = true

passenv =
    HOME
    USERNAME
    USER
    XDG_*
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE
    REPO_CFG

allowlist_externals =
    bash

deps =
    {[base]deps}
    # logging_tree
    -e .

commands =
    repolite --version
    repolite --dump-config

[testenv:{sync,do}]
envdir = {toxinidir}/.sync
# these 2 tox env cmds share the same env with the following plugin
# https://github.com/masenf/tox-ignore-env-name-mismatch
runner = ignore_env_name_mismatch

description =
    do: Run cmd following "--" from the sync env, e.g. "tox -e do -- repolite --show"
    sync: Install repolite and use it for cloning example workflow deps

passenv =
    pythonLocation
    PYTHON
    DISPLAY
    XAUTHORITY
    HOME
    USERNAME
    USER
    XDG_*
    CI
    GITHUB*
    OS
    LANG
    LC_COLLATE
    SSH_*
    GID
    UID
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

allowlist_externals =
    bash

deps =
    # logging_tree
    {[base]deps}
    .

commands =
    sync: repolite {posargs:--quiet}
    sync: repolite --show
    do: {posargs:python -c 'print("No cmd provided")'}

[testenv:docs]
skip_install = true
allowlist_externals =
    bash
    make

deps =
    {[base]deps}
    .[doc]

commands = make -C docs html

[testenv:docs-lint]
skip_install = true
allowlist_externals =
    bash
    make

deps =
    {[base]deps}
    .[doc]

commands = make -C docs linkcheck

[testenv:build]
skip_install = true

passenv =
    pythonLocation
    CI
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE
    SETUPTOOLS_SCM_DEBUG

deps =
    {[build]deps}

commands =
    python -m build .
    twine check dist/*

[testenv:check]
skip_install = true
passenv =
    CI
    OS
    PYTHONIOENCODING

deps =
    pip>=21.1

commands =
    pip install repolite --force-reinstall --pre --prefer-binary -f dist/
    repolite --version

[testenv:lint]
passenv =
    CI
    OS
    PYTHONIOENCODING

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    pylint
    -r requirements.txt

commands =
    pylint --fail-under=9.60 src/repolite/

[testenv:style]
passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    flake8
    flake8-bugbear

commands =
    flake8 src/

[testenv:mypy]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

allowlist_externals =
    bash

deps =
    {[base]deps}
    mypy
    munch-stubs
    -r requirements.txt

commands =
    python -m mypy --follow-imports=normal --install-types --non-interactive src/

[testenv:isort]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    isort
    -r requirements.txt

commands =
    python -m isort src/

[testenv:sec]
skip_install = true
passenv =
    PYTHON
    CI
    OS
    PYTHONIOENCODING
    PIP_DOWNLOAD_CACHE

deps =
    {[base]deps}
    bandit[toml]

commands =
    bandit -c pyproject.toml -r src/

[testenv:clean]
skip_install = true
allowlist_externals =
    bash

deps =
    pip>=21.1

commands =
    bash -c 'make -C docs/ clean'
    bash -c 'rm -rf __pycache__ build dist ext src/*.egg-info docs/source/api'
